# Copyright (C) 2023 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
Manipulate AnsMath vectors or dense matrices as NumPy arrays
------------------------------------------------------------
This example demonstrates how to use NumPy arrays to exchange data between PyAnsys Math
and Python.

.. note::
    This example requires Ansys 2021 R2 or later.

"""
# Perform required imports and start PyAnsys
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Perform required imports.

import matplotlib.pyplot as plt
import numpy as np

import ansys.math.core.math as pymath

# Start PyAnsys Math as a server.
mm = pymath.AnsMath()


###############################################################################
# Convert AnsMath vector into NumPy array
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Allocate an AnsMath vector with 10 doubles.

apdl_vec = mm.ones(10)
print(apdl_vec)

###############################################################################
# Create a NumPy array from this AnsMath vector.
#
# Note that these are two separate objects. Memory is
# duplicated. Modifying one object does not modify its clone.

pv = apdl_vec.asarray()
print(pv)


###############################################################################
# You can manipulate this NumPy array with all existing NumPy
# features.

pv = (pv + 1) ** 2
print(pv)


###############################################################################
# Alternatively, the AnsMath object can be operated on directly with
# using NumPy methods.

print(np.max(apdl_vec))
print(np.linalg.norm(apdl_vec))

###############################################################################
# Note that some methods have APDL corollaries, and these methods are
# more efficient if performed within PyAnsys Math.
#
# For example, the norm method can be performed within PyAnsys Math.
print(apdl_vec.norm(), np.linalg.norm(apdl_vec))

###############################################################################
# Copy NumPy array to an AnsMath vector
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# You can push back any NumPy vector or 2D array to PyAnsys Math. This
# creates a new AnsMath vector, which in this case is named ``"NewVec:``.

mm.set_vec(pv, "NewVec")
print(mm.status())

###############################################################################
# Create a Python handle to this vector
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create a Python handle to this vector by specifying its name.

v2 = mm.vec(name="NewVec")
print(v2)

###############################################################################
# Apply same features to dense arrays
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# You can apply the same features to dense APDL matrices and NumPy arrays.
#
# Allocate an AnsMath dense matrix.
apdl_mat = mm.rand(3, 3)
plt.imshow(apdl_mat, cmap="YlOrBr")
plt.colorbar()
plt.title("AnsMath dense matrix")
plt.show()

###############################################################################
# Convert the AnsMatch dense matrix to a NumPy array.

np_arr = apdl_mat.asarray()

assert np.allclose(apdl_mat, np_arr)
print(apdl_mat)
print(np_arr)

###############################################################################
# Use the ``matrix`` method to load the NumPy array to APDL.

np_rand = np.random.random((4, 4))
ans_mat = mm.matrix(np_rand)

# Print the autogenerated name of this matrix.

print(ans_mat.id)


###############################################################################
# Load this matrix from APDL and verify it is identical.
from_ans = ans_mat.asarray()
print(np.allclose(from_ans, np_rand))


###############################################################################
# Stop PyAnsys Math
# ~~~~~~~~~~~~~~~~~
# Stop PyAnsys Math.

mm._mapdl.exit()
