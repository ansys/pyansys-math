# check spelling, codestyle
name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  workflow_dispatch:
  schedule: # UTC at 0300
    - cron: "0 3 * * *"
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.9'
  PACKAGE_NAME: 'Ansys Math'
  PYANSYS_OFF_SCREEN: True
  DOCKER_PACKAGE: ghcr.io/pyansys/pymapdl/mapdl
  DOCKER_IMAGE_VERSION_DOCS_BUILD: v22.2.0
  RESET_PIP_CACHE: 11

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  packages: read

jobs:

  # code-style:
  #   name: "Code style checks"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: "PyAnsys code style checks"
  #       uses: pyansys/actions/code-style@v2
  #       with:
  #         python-version: ${{ env.MAIN_PYTHON_VERSION }}
  
  stylecheck:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: pyansys/actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    needs: [stylecheck]
    steps:
      - name: PyAnsys documentation style checks
        uses: pyansys/actions/doc-style@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  docs-build:
    name: Doc building
    runs-on: ubuntu-latest
    needs: [docs-style]
    steps:
      - name: "Run Ansys documentation building action"
        uses: pyansys/actions/doc-build@v2
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  build_test:
    name: Build and Unit Testing
    runs-on: ubuntu-latest
    needs: [testimport]
    strategy:
      matrix:
        mapdl-version: ['v21.1.1', 'v21.2.1', 'v22.1.0', 'v22.2.0', 'v22.2-ubuntu']
    env:
      PYMAPDL_PORT: 21000  # default won't work on GitHub runners
      PYMAPDL_DB_PORT: 21001  # default won't work on GitHub runners
      PYMAPDL_START_INSTANCE: FALSE

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt install libgl1-mesa-glx xvfb

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

      - name: Test virtual framebuffer
        run: |
          pip install -r .ci/requirements_test_xvfb.txt
          xvfb-run python .ci/display_test.py

      - name: Install ansys-mapdl-core
        run: |
          pip install build
          python -m build
          pip install dist/*.whl
          xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

      - name: Login in Github Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, launch, and validate MAPDL service
        run: .ci/start_mapdl.sh
        if: ${{ !contains( matrix.mapdl-version, 'ubuntu') }}
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          MAPDL_IMAGE: ${{ env.DOCKER_PACKAGE }}:${{ matrix.mapdl-version }}

      - name: Pull, launch, and validate Ubuntu MAPDL service from private
        run: bash .ci/start_mapdl_ubuntu.sh
        if: ${{ contains( matrix.mapdl-version, 'ubuntu') }}
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          MAPDL_IMAGE: ghcr.io/pyansys/mapdl:${{ matrix.mapdl-version }}

      - name: Unit Testing Requirements Installation
        run: |
          pip install .[tests]

      - name: Unit Testing
        run: |
          xvfb-run pytest -v --durations=10 --maxfail=10  --reruns 7 --reruns-delay 3 --only-rerun MapdlExitedError  --cov=ansys.mapdl.core --cov-report=xml --cov-report=html

      - uses: codecov/codecov-action@v3
        name: 'Upload coverage to Codecov'

      - name: Check package
        run: |
          pip install twine
          twine check dist/*

      - name: Upload wheel and binaries
        uses: actions/upload-artifact@v3
        with:
          name: PyMAPDL-packages
          path: dist/
          retention-days: 7

      - name: Display files structure
        if: always()
        run: |
          mkdir logs-${{ matrix.mapdl-version }} && echo "Successfully generated directory ${{ matrix.mapdl-version }}"
          echo "::group:: Display files structure" && ls -R && echo "::endgroup::"
          ls -R > ./logs-${{ matrix.mapdl-version }}/files_structure.txt

      - name: Display docker files structures
        if: always()
        run: |
          echo "::group:: Display files structure" && docker exec mapdl /bin/bash -c "ls -R" && echo "::endgroup::"
          docker exec mapdl /bin/bash -c "ls -R" > ./logs-${{ matrix.mapdl-version }}/docker_files_structure.txt

      - name: Collect MAPDL logs on failure
        if: ${{ always() && !contains( matrix.mapdl-version, 'ubuntu') }}
        run: |
          docker exec mapdl /bin/bash -c "mkdir -p /mapdl_logs && echo 'Successfully created directory inside docker container'"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.out' > /dev/null ;then cp -f /file*.out /mapdl_logs && echo 'Successfully copied out files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.err' > /dev/null ;then cp -f /file*.err /mapdl_logs && echo 'Successfully copied err files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G 'file*.log' > /dev/null ;then cp -f /file*.log /mapdl_logs && echo 'Successfully copied log files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G '*.crash' > /dev/null ;then cp -f /*.crash /mapdl_logs && echo 'Successfully copied crash files.'; fi"
          docker cp mapdl:/mapdl_logs/. ./logs-${{ matrix.mapdl-version }}/.


      - name: Collect MAPDL logs on failure for ubuntu image
        if: ${{ always() && contains( matrix.mapdl-version,'ubuntu') }}
        run: |
          docker exec mapdl /bin/bash -c "mkdir -p /mapdl_logs && echo 'Successfully created directory inside docker container'"
          docker exec mapdl /bin/bash -c "if compgen -G '/jobs/file*.out' > /dev/null ;then cp -f /jobs/file*.out /mapdl_logs && echo 'Successfully copied out files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G '/jobs/file*.err' > /dev/null ;then cp -f /jobs/file*.err /mapdl_logs && echo 'Successfully copied err files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G '/jobs/file*.log' > /dev/null ;then cp -f /jobs/file*.log /mapdl_logs && echo 'Successfully copied log files.'; fi"
          docker exec mapdl /bin/bash -c "if compgen -G '/jobs/*.crash' > /dev/null ;then cp -f /jobs/*.crash /mapdl_logs && echo 'Successfully copied crash files.'; fi"
          docker cp mapdl:/mapdl_logs/. ./logs-${{ matrix.mapdl-version }}/.

      - name: Tar logs
        if: always()
        run: |
          cp log.txt ./logs-${{ matrix.mapdl-version }}/log.txt
          tar cvzf ./logs-${{ matrix.mapdl-version }}.tgz ./logs-${{ matrix.mapdl-version }}

      - name: Upload logs to GitHub
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: logs-${{ matrix.mapdl-version }}.tgz
          path: ./logs-${{ matrix.mapdl-version }}.tgz

      - name: Display MAPDL Logs
        if: always()
        run: cat log.txt

      - name: List main files
        if: always()
        run: |
          if compgen -G './logs-${{ matrix.mapdl-version }}/*.err' > /dev/null ;then for f in ./logs-${{ matrix.mapdl-version }}/*.err; do echo "::group:: Error file $f" && cat $f && echo "::endgroup::" ; done; fi
          if compgen -G './logs-${{ matrix.mapdl-version }}/*.log' > /dev/null ;then for f in ./logs-${{ matrix.mapdl-version }}/*.log; do echo "::group:: Log file $f" && cat $f && echo "::endgroup::" ; done; fi
          if compgen -G './logs-${{ matrix.mapdl-version }}/*.out' > /dev/null ;then for f in ./logs-${{ matrix.mapdl-version }}/*.out; do echo "::group:: Output file $f" && cat $f && echo "::endgroup::" ; done; fi

  test_windows:
    name: Unit Testing on Windows
    runs-on: [self-hosted, Windows, pymapdl]
    needs: [build_test]
    steps:
      - uses: actions/checkout@v3

      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.9

      - name: Checking python_
        shell: powershell
        run: |
          python -m pip install --upgrade pip
      
      - name: Creating python venv
        run: |
          python -m venv .\.venv
          .\.venv\Scripts\activate

      - name: Install ansys-mapdl-core
        shell: powershell
        run: |
          python -m pip install build
          python -m build
          $FILE_=Resolve-Path '.\dist\*.whl'
          python -m pip install $FILE_.Path --upgrade
          python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

      - name: Unit Testing Requirements Installation
        shell: powershell
        run: |
          python -m pip install .[tests]

      # - name: DPF Server Activation
      #   run: |
      #     docker pull ghcr.io/pyansys/dpf-core:22.2dev
      #     docker run -d --name dpfserver -p ${{ env.DPF_PORT }}:50052 ghcr.io/pyansys/dpf-core:22.2dev && echo "DPF Server active on port ${{ env.DPF_PORT }}."

      - name: Unit Testing
        run: |
          set PYMAPDL_PORT=
          set PYMAPDL_START_INSTANCE=
          python -m pytest -v --durations=10 --maxfail=10  --reruns 7 --reruns-delay 3 --only-rerun MapdlExitedError  --cov=ansys.mapdl.core --cov-report=xml --cov-report=html

      - uses: codecov/codecov-action@v3
        name: 'Upload coverage to Codecov'


  # tests:
  #   name: Build and testing
  #   runs-on: ubuntu-latest
  #   needs: [code-style, docs-build]
  
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ env.MAIN_PYTHON_VERSION }}

  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip build twine

  #     - name: Build wheel and sdist
  #       run: |
  #         python -m pip install build
  #         python -m build
  #         python -m twine check dist/*

  #     - name: Install library
  #       run: pip install .

  #     - name: Unit Testing
  #       run: |
  #         pip install .[doc,tests]
  #         pip install .
  #         pytest -m pytest -v --durations=10 --maxfail=10  --reruns 7 --reruns-delay 3 --only-rerun MapdlExitedError  --cov=ansys.mapdl.core --cov-report=xml --cov-report=html

  #     - uses: codecov/codecov-action@v3
  #       name: 'Upload coverage to Codecov'

  release:

    name: "Release project to private PyPI, public PyPI and GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [test_windows, docs-build]
    runs-on: ubuntu-latest
    steps:
    #  - name: "Release to the private PyPI repository"
    #    uses: pyansys/actions/release-pypi-private@v1
    #    with:
    #      library-name: ${{ env.PACKAGE_NAME }}
    #      twine-username: "__token__"
    #      twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
#
    #  - name: "Release to the public PyPI repository"
    #    uses: pyansys/actions/release-pypi-public@v1
    #    with:
    #      library-name: ${{ env.PACKAGE_NAME }}
    #      twine-username: "__token__"
    #      twine-token: ${{ secrets.PYPI_TOKEN }}
#
    - name: "Release to GitHub"
      uses: pyansys/actions/release-github@v1
      with:
        library-name: ${{ env.PACKAGE_NAME }}